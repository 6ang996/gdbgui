//- The jade project (and file extension) is now Pug, but
//- as far as I know, the python package has not been renamed, so it remains
//- a jade file for now

html
head
    link(href='static/css/gdbgui.css', rel='stylesheet')
    link(href='static/vendor/css/bootstrap.min.css', rel='stylesheet')
    link(href='static/vendor/css/messenger.css', rel='stylesheet')

    script(type="text/javascript" src='static/vendor/js/jquery.min.js')
    script(type="text/javascript" src='static/vendor/js/bootstrap.min.js')
    script(type="text/javascript" src='static/vendor/js/messenger.min.js')
    script(type="text/javascript" src='static/vendor/js/lodash.min.js')
    script(type="text/javascript" src='static/vendor/js/moment.min.js')

body
    div.container-fluid(style="position: fixed; top: 0; margin-top: 0;
                                height: 30px; width: 100%;
                                border-bottom: black; border-style: solid; border-width: 0px; border-bottom-width: 1px;
                                z-index: 1000; background: #6dc6ff")
        div.row
            span Status:&nbsp&nbsp
            span#status(style="height: 20px") GDB is running on the backend. Choose a binary to debug.

    div.container-fluid(style="margin-top: 50px")
        div.row
            div.col-md-6
                //- binary selection
                form(role=form)
                    div.input-group.input-group-sm
                        span.input-group-btn
                            button.btn.btn-primary#set_target_app(type="button") Load Binary
                        input.form-control#binary(type="text", placeholder="Path to target executable")

                //- premade buttons
                div.btn-group.btn-group-xs(role="group")
                    button.btn.btn-default.gdb_cmd(type='button', data-cmd='-exec-run', title='Run the loaded program') Run
                        span.glyphicon.glyphicon-off.padding_left
                    button.btn.btn-default.gdb_cmd(type='button', data-cmd='-exec-continue', title='Continue running program') Continue
                        span.glyphicon.glyphicon-play.padding_left
                    button.btn.btn-default.gdb_cmd(type='button', data-cmd='-exec-next', title='Step to next line (will not enter function)') Next
                        span.glyphicon.glyphicon-step-forward.padding_left
                    button.btn.btn-default.gdb_cmd(type='button', data-cmd='-exec-step', title='Step into next function call or to next line') Step
                        span.glyphicon.glyphicon-arrow-down.padding_left
                    button.btn.btn-default.gdb_cmd(type='button', data-cmd='-exec-return', title='Return to calling function') Return
                        span.glyphicon.glyphicon-arrow-up.padding_left
                    button.btn.btn-default.gdb_cmd(type='button', data-cmd='-break-insert main', title="Add breakpoint to the programs entry point") Add Breakpoint to Main
                        span.glyphicon.glyphicon-flag.padding_left
                    button.btn.btn-default.gdb_cmd(type="button", data-cmd='-exec-interrupt') Kill Target
                        span.glyphicon.glyphicon-ban-circle.padding_left

                    button.btn.btn-default.get_gdb_response(type="button") Get GDB Response


                //- freeform input
                form(role=form)
                    div.input-group.input-group-sm
                        span.input-group-btn
                            button.btn.btn-success.run_gdb_command(type="button") Send command
                        input.form-control.dropdown-input#gdb_command(type="text", placeholder="gdb command", autocomplete="on", list="gdb_command_reference")

        //- source
        div.no_padding.col-md-12#source_div
            span#source_code_heading Source Code
            span.glyphicon.glyphicon-plus.resizer.pointer(data-target_selector="#code_container" data-resize_type="enlarge")
            span.glyphicon.glyphicon-minus.resizer.pointer(data-target_selector="#code_container" data-resize_type="shrink")
            button.btn.btn-default.gdb_cmd.btn-xs(type="button", data-cmd='-file-list-exec-source-files') Fetch Source File List
            div#code_container.gdb_content_div(style="height: 300px")
                table#code_table.code
                    tr
                        td Source code will be displayed here when applicable

        div.col-md-6.no_padding
            span gdb console
            button.btn.btn-default.btn-xs.clear_console(type='button') Clear
            span.glyphicon.glyphicon-plus.resizer.pointer(data-target_selector="#console" data-resize_type="enlarge")
            span.glyphicon.glyphicon-minus.resizer.pointer(data-target_selector="#console" data-resize_type="shrink")
            div#console.gdb_content_div

        div.col-md-6.no_padding
            span Breakpoints
            button.btn.btn-default.btn-xs.gdb_cmd(type='button', data-cmd='-break-list', title="Get table of all breakpoints") Refresh
                span.glyphicon.glyphicon-refresh.padding_left
            span.glyphicon.glyphicon-plus.resizer.pointer(data-target_selector="#breakpoints" data-resize_type="enlarge")
            span.glyphicon.glyphicon-minus.resizer.pointer(data-target_selector="#breakpoints" data-resize_type="shrink")

            div#breakpoints.gdb_content_div

        div.col-md-6.no_padding stdout/stderr
            span.glyphicon.glyphicon-plus.resizer.pointer(data-target_selector="#stdout" data-resize_type="enlarge")
            span.glyphicon.glyphicon-minus.resizer.pointer(data-target_selector="#stdout" data-resize_type="shrink")
            button.btn.btn-default.btn-xs.gdb_cmd(type='button', data-cmd='-data-evaluate-expression fflush(0)') Refresh
                span.glyphicon.glyphicon-refresh.padding_left
            div.gdb_content_div#stdout

        //- history
        div.col-md-6.no_padding History
            button.btn.btn-default.btn-xs.clear_history(type='button') Clear

            div.gdb_content_div
                table.table.table-condensed
                    tbody#command_history

        div.col-md-6.no_padding stack
            span.glyphicon.glyphicon-plus.resizer.pointer(data-target_selector="#stack" data-resize_type="enlarge")
            span.glyphicon.glyphicon-minus.resizer.pointer(data-target_selector="#stack" data-resize_type="shrink")
            button.btn.btn-default.btn-xs.gdb_cmd(type='button', data-cmd='-stack-list-frames') Refresh
                span.glyphicon.glyphicon-refresh.padding_left
            div#stack.gdb_content_div

        div.col-md-6.no_padding registers
            span.glyphicon.glyphicon-plus.resizer.pointer(data-target_selector="#registers" data-resize_type="enlarge")
            span.glyphicon.glyphicon-minus.resizer.pointer(data-target_selector="#registers" data-resize_type="shrink")
            button.btn.btn-default.btn-xs.gdb_cmd(type='button', data-cmd='-data-list-register-names
            -data-list-register-values x') Refresh
                span.glyphicon.glyphicon-refresh.padding_left
            div#registers.gdb_content_div

        div.col-md-6.no_padding disassembly
            span#disassembly_heading
            span.glyphicon.glyphicon-plus.resizer.pointer(data-target_selector="#disassembly" data-resize_type="enlarge")
            span.glyphicon.glyphicon-minus.resizer.pointer(data-target_selector="#disassembly" data-resize_type="shrink")
            button.btn.btn-default.btn-xs#refresh_disassembly(type='button') Refresh
                span.glyphicon.glyphicon-refresh.padding_left
            div#disassembly.gdb_content_div

        div.col-md-6.no_padding gdb machine interface output
            span.glyphicon.glyphicon-plus.resizer.pointer(data-target_selector="#gdb_mi_output" data-resize_type="enlarge")
            span.glyphicon.glyphicon-minus.resizer.pointer(data-target_selector="#gdb_mi_output" data-resize_type="shrink")
            div#gdb_mi_output.gdb_content_div


datalist(id="gdb_command_reference")
    option(value="Command Description")
    option(value="help  List gdb command topics.")
    option(value="help topic-classes  List gdb command within class.")
    option(value="help command  Command description. ")
    option(value="eg help show to list the show commands")
    option(value="apropos search-word Search for commands and command topics containing search-word.")
    option(value="info args")
    option(value="i args  List program command line arguments")
    option(value="info breakpoints  List breakpoints")
    option(value="info break  List breakpoint numbers.")
    option(value="info break breakpoint-number  List info about specific breakpoint.")
    option(value="info watchpoints  List breakpoints")
    option(value="info registers  List registers in use")
    option(value="info threads  List threads in use")
    option(value="info set  List set-able option")
    option(value="Break and Watch ")
    option(value="break funtion-name")
    option(value="break line-number")
    option(value="break ClassName::functionName Suspend program at specified function of line number.")
    option(value="break +offset")
    option(value="break -offset Set a breakpoint specified number of lines forward or back from the position at which execution stopped.")
    option(value="break filename:function Don't specify path, just the file name and function name.")
    option(value="break filename:line-number  Don't specify path, just the file name and line number.")
    option(value="break Directory/Path/filename.cpp:62")
    option(value="break *address  Suspend processing at an instruction address. Used when you do not have source.")
    option(value="break line-number if condition  Where condition is an expression. i.e. x > 5")
    option(value="Suspend when boolean expression is true.")
    option(value="break line thread thread-number Break in thread at specified line number. Use info threads to display thread numbers.")
    option(value="tbreak  Temporary break. Break once only. Break is then removed. See \"break\" above for options.")
    option(value="watch condition Suspend processing when condition is met. i.e. x > 5")
    option(value="clear")
    option(value="clear function")
    option(value="clear line-number Delete breakpoints as identified by command option.")
    option(value="Delete all breakpoints in function")
    option(value="Delete breakpoints at a given line")
    option(value="delete")
    option(value="d Delete all breakpoints, watchpoints, or catchpoints.")
    option(value="delete breakpoint-number")
    option(value="delete range  Delete the breakpoints, watchpoints, or catchpoints of the breakpoint ranges specified as arguments.")
    option(value="disable breakpoint-number-or-range")
    option(value="enable breakpoint-number-or-range Does not delete breakpoints. Just enables/disables them.")
    option(value="Example:")
    option(value="Show breakpoints: info break")
    option(value="Disable: disable 2-9")
    option(value="enable breakpoint-number once Enables once")
    option(value="continue")
    option(value="c Continue executing until next break point/watchpoint.")
    option(value="continue number Continue but ignore current breakpoint number times. Usefull for breakpoints within a loop.")
    option(value="finish  Continue to end of function.")
    option(value="Line Execution  ")
    option(value="step")
    option(value="s")
    option(value="step number-of-steps-to-perform Step to next line of code. Will step into a function.")
    option(value="next")
    option(value="n")
    option(value="next number Execute next line of code. Will not enter functions.")
    option(value="until")
    option(value="until line-number Continue processing until you reach a specified line number. Also: function name, address, filename:function or")
    option(value="filename:line-number.")
    option(value="info signals")
    option(value="info handle")
    option(value="where Shows current line number and which function you are in.")
    option(value="Stack ")
    option(value="backtrace")
    option(value="bt")
    option(value="bt inner-function-nesting-depth")
    option(value="bt -outer-function-nesting-depth  Show trace of where you are currently. Which functions you are in. Prints stack backtrace.")
    option(value="backtrace full  Print values of local variables.")
    option(value="frame")
    option(value="frame number")
    option(value="f number  Show current stack frame (function where you are stopped)")
    option(value="Select frame number. can also user up/down to navigate frames")
    option(value="up")
    option(value="down")
    option(value="up number")
    option(value="down number Move up a single frame element in the call stack")
    option(value="Move down a single frame")
    option(value="Move up/down the specified number of frames in the stack.")
    option(value="info frame  List address, language, address of arguments/local variables and which registers were saved in frame.")
    option(value="info args")
    option(value="info locals")
    option(value="info catch  Info arguments of selected frame, local variables and exception handlers.")
    option(value="Source Code ")
    option(value="list")
    option(value="l")
    option(value="list line-number")
    option(value="list function")
    option(value="list -")
    option(value="list start#,end#")
    option(value="list filename:function  List source code.")
    option(value="set listsize count")
    option(value="show listsize Number of lines listed when list command given.")
    //- option(value="directory directory-name")
    //- option(value="dir directory-name")
    //- option(value="show directories  Add specified directory to front of source code path.")
    //- option(value="directory Clear sourcepath when nothing specified.")
    //- option(value="Machine Language  ")
    //- option(value="info line")
    //- option(value="info line number  Displays the start and end position in object code for the current line in source.")
    //- option(value="Display position in object code for a specified line in source.")
    //- option(value="disassemble 0xstart 0xend Displays machine code for positions in object code specified (can use start and end hex memory values")
    //- option(value="given by the info line command.")
    //- option(value="stepi")
    //- option(value="si")
    //- option(value="nexti")
    //- option(value="ni  step/next assembly/processor instruction.")
    //- option(value="x 0xaddress")
    //- option(value="x/nfu 0xaddress Examine the contents of memory.")
    //- option(value="Examine the contents of memory and specify formatting.")
    //- option(value="n: number of display items to print")
    //- option(value="f: specify the format for the output")
    //- option(value="u: specify the size of the data unit (eg. byte, word, ...)")
    //- option(value="Example: x/4dw var")
    //- option(value="Examine Variables ")
    //- option(value="print variable-name")
    //- option(value="p variable-name")
    //- option(value="p file-name::variable-name")
    //- option(value="p 'file-name'::variable-name  Print value stored in variable.")
    //- option(value="p *array-variable@length  Print first # values of array specified by length. Good for pointers to dynamicaly allocated memory.")
    //- option(value="p/x variable  Print as integer variable in hex.")
    //- option(value="p/d variable  Print variable as a signed integer.")
    //- option(value="p/u variable  Print variable as a un-signed integer.")
    //- option(value="p/o variable  Print variable as a octal.")
    //- option(value="p/t variable")
    //- option(value="x/b address")
    //- option(value="x/b &variable Print as integer value in binary. (1 byte/8bits)")
    //- option(value="p/c variable  Print integer as character.")
    //- option(value="p/f variable  Print variable as floating point number.")
    //- option(value="p/a variable  Print as a hex address.")
    //- option(value="x/w address")
    //- option(value="x/4b &variable  Print binary representation of 4 bytes (1 32 bit word) of memory pointed to by address.")
    //- option(value="ptype variable")
    //- option(value="ptype data-type Prints type definition of the variable or declared variable type. Helpful for viewing class or struct definitions option(value=while debugging.")
    //- option(value="GDB Modes ")
    //- option(value="set gdb-option value  Set a GDB option")
    //- option(value="set logging on")
    //- option(value="set logging off")
    //- option(value="show logging")
    //- option(value="set logging file log-file Turn on/off logging. Default name of file is gdb.txt")
    //- option(value="set print array on")
    //- option(value="set print array off")
    //- option(value="show print array  Default is off. Convient readable format for arrays turned on/off.")
    //- option(value="set print array-indexes on")
    //- option(value="set print array-indexes off")
    //- option(value="show print array-indexes  Default off. Print index of array elements.")
    //- option(value="set print pretty on")
    //- option(value="set print pretty off")
    //- option(value="show print pretty Format printing of C structures.")
    //- option(value="set print union on")
    //- option(value="set print union off")
    //- option(value="show print union  Default is on. Print C unions.")
    //- option(value="set print demangle on")
    //- option(value="set print demangle off")
    //- option(value="show print demangle Default on. Controls printing of C++ names.")
    //- option(value="Start and Stop  ")
    //- option(value="run")
    //- option(value="r")
    //- option(value="run command-line-arguments")
    //- option(value="c Continue execution to next break point.")
    //- option(value="kill  Stop program execution.")
    //- option(value="quit")
    //- option(value="q Exit GDB debugger.")

script(type="text/javascript" src='static/js/gdbgui.js')
